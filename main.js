/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VimScroll
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var VimScroll = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.handleKeyPress = (event) => {
      const activeLeaf = this.app.workspace.activeLeaf;
      if (activeLeaf && activeLeaf.view.getViewType() === "markdown") {
        const markdownView = activeLeaf.view;
        const mode = markdownView.getMode();
        if (mode === "preview") {
          if (event.key === "j") {
            this.scrollPreviewPane(60);
            event.preventDefault();
          } else if (event.key === "k") {
            this.scrollPreviewPane(-60);
            event.preventDefault();
          } else if (event.key === "g") {
            this.scrollPreviewPaneBeginning();
            event.preventDefault();
          } else if (event.key === "G") {
            this.scrollPreviewPaneEnd();
            event.preventDefault();
          }
        }
      }
    };
  }
  async onload() {
    await this.loadSettings();
    document.addEventListener("keydown", this.handleKeyPress);
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
    document.removeEventListener("keydown", this.handleKeyPress);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async scrollPreviewPaneEnd() {
    let markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (markdownView) {
      const file = this.app.workspace.getActiveFile();
      const content = await this.app.vault.cachedRead(file);
      const lines = content.split("\n");
      let numberOfLines = lines.length;
      if (markdownView.getMode() === "preview") {
        while (numberOfLines > 0 && lines[numberOfLines - 1].trim() === "") {
          numberOfLines--;
        }
      }
      markdownView.currentMode.applyScroll(numberOfLines - 1);
    }
  }
  async scrollPreviewPaneBeginning() {
    let markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (markdownView) {
      const preview = markdownView.previewMode;
      preview.applyScroll(0);
    }
  }
  scrollPreviewPane(amount) {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf || activeLeaf.view.getViewType() !== "markdown")
      return;
    const previewContainer = activeLeaf.view.containerEl.querySelector(".markdown-preview-view");
    if (previewContainer) {
      previewContainer.scrollBy({
        top: amount,
        behavior: "auto"
      });
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
